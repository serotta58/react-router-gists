{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","gists","_this2","this","fetch","then","result","json","setState","react_default","a","createElement","react_router_dom","App_Root","App_Sidebar","map","gist","App_SidebarItem","key","id","to","concat","description","App_Main","react_router","exact","path","render","_ref","match","App_Gist","find","g","params","gistId","Component","Gist","_ref2","Object","keys","files","App_LoadFile","url","raw_url","text","Root","props","assign","style","display","Sidebar","width","height","overflow","background","WebkitOverflowScrolling","SidebarItem","whiteSpace","textOverflow","padding","Main","flex","LoadFile","file","_this4","res","children","Boolean","window","location","hostname","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7c5782f7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { HashRouter as Router, Link, Route, Redirect } from 'react-router-dom';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    gists: null\n  }\n\n  componentDidMount() {\n    fetch('https://api.github.com/gists')\n      .then(result => result.json())\n      .then(gists => this.setState({ gists: gists }));\n  }\n\n  render() {\n    const { gists } = this.state;\n    // console.log(gists);\n    return (\n      <Router>\n        <Root>\n          <Sidebar>\n            {gists ? (\n              gists.map(gist => (\n                <SidebarItem key={gist.id}>\n                  {/* Note use of back tick to make a template literal\n                  string that allows an embedded JS variable with ${} */}\n                  <Link to={`/g/${gist.id}`}>\n                    {gist.description || '[no description]'}\n                  </Link>\n                </SidebarItem>\n              ))\n            ) : <div>Loading...</div>}\n          </Sidebar>\n          <Main>\n            <Route exact path='/' render={() => (\n              <h1>Welcome!</h1>\n            )} />\n            {gists &&\n              <Route path='/g/:gistId' render={({ match }) => (\n                <Gist gist={gists.find(g => g.id === match.params.gistId)} />\n              )} />\n            }\n          </Main>\n        </Root>\n      </Router>\n    );\n  }\n}\n\nconst Gist = ({ gist }) => {\n  // If no gist was found in the map, reset the page\n  // This could mean user edited the URL or they refreshed the page\n  // and the previous gist fell off the list.\n  if (!gist) {\n    return <Redirect to='/' />;\n  }\n\n  return (\n    <div>\n      <h1>{gist.description || 'No Description'}</h1>\n      <ul>\n        {Object.keys(gist.files).map(key => (\n          <li key={key}>\n            <b>{key}</b>\n            <LoadFile url={gist.files[key].raw_url}>\n              {(text) => (\n                <pre>{text}</pre>\n              )}\n            </LoadFile>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nconst Root = (props) => (\n  <div style={{ display: 'flex' }} {...props} />\n)\n\nconst Sidebar = (props) => (\n  <div style={{\n    width: '33vw',\n    height: '100vh',    // keep in viewport to make it scrollable\n    overflow: 'auto',\n    background: '#eee',\n    WebkitOverflowScrolling: 'touch',   // inertia on touchscreens\n  }} {...props} />\n)\n\nconst SidebarItem = (props) => (\n  <div style={{\n    whiteSpace: 'nowrap',     // keep on one line\n    textOverflow: 'ellipsis', // end with ... if it overflows\n    overflow: 'hidden',       // prevent horizontal scrollbar\n    padding: '5px 10px',\n  }} {...props} />\n)\n\nconst Main = (props) => (\n  <div style={{\n    flex: 1,            // fill remaining space (in flex direction)\n    height: '100vh',    // match viewport height, autoscroll if needed\n    overflow: 'auto',\n    WebkitOverflowScrolling: 'touch',   // inertia on touchscreens\n  }}>\n    <div style={{ padding: '20px' }} {...props} />\n  </div>\n)\n\n// Loadfile needs to be a full Component to hold state and thus\n// trigger another rendering once the file has been fetched.\n// Initially this will return null, but then React will detect\n// the state change (file state is set) and call render() again.\nclass LoadFile extends Component {\n  state = {\n    file: null\n  }\n\n  componentDidMount() {\n    fetch(this.props.url)\n      .then(res => res.text())\n      .then(file => {\n        this.setState({ file })\n      })\n  }\n\n  render() {\n    const { file } = this.state;\n    // console.log(`LoadFile(${this.props.url}): ${file}`)\n    return (\n      file && this.props.children(file)\n    );\n  }\n}\n\n// A simple stateless function like this won't work for LoadFile.\n// There is nothing to return when it is first called, and then\n// no way to trigger a re-rendering of the component once the fetch\n// and text() completes.  This also doesn't return props.children,\n// so there is no easy way to pass the retrieved file to them.\n// The full stateful component above is the way to go.\n//\n// const LoadFile = async (url) => {\n//   console.log(url);\n//   const response = await fetch(url);\n//   const bodyTxt = await response.text();\n//   console.log(bodyTxt);\n//   return bodyTxt;\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}